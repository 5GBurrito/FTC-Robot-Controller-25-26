//
// build.gradle in TeamCode
//
// Most of the definitions for building your module reside in a common, shared
// file 'build.common.gradle'. Being factored in this way makes it easier to
// integrate updates to the FTC into your code. If you really need to customize
// the build definitions, you can place those customizations in this file, but
// please think carefully as to whether such customizations are really necessary
// before doing so.


// Custom definitions may go here

// Include common definitions from above.
apply from: '../build.common.gradle'
apply from: '../build.dependencies.gradle'

android {
    namespace = 'org.firstinspires.ftc.teamcode'
    androidResources {
        noCompress 'tflite'
    }

    packagingOptions {
        jniLibs {
            pickFirsts += ['**/*.so']
        }
        jniLibs.useLegacyPackaging true
    }
}

repositories {
    maven {
        url = "https://maven.kuriosityrobotics.com/releases/"
    }
}

dependencies {
    // other stuff
    implementation project(':FtcRobotController')
<<<<<<< HEAD
<<<<<<< HEAD
}

dependencies {
    implementation 'org.openftc:easyopencv:1.5.0'
}
=======
=======
    testImplementation 'junit:junit:4.12'
>>>>>>> d4a9f77 (mecanum parallel PID control method: calculates and returns power needed, does NOT set power inside the method. new class DrivetrainPowers assigns powers to motors so setPowers can use them easily. figured out test code stuff to debug offline. made a few methods (ie PID controller)  less dependent on other methods for easier isolation of methods to debug and test.)
    annotationProcessor files('lib/OpModeAnnotationProcessor.jar')
<<<<<<< HEAD
}
>>>>>>> 7d07508 (VISION CODE THAT WORKS YES)
=======

    implementation "com.kuriosityrobotics.shuttle:shuttle-core:1.0"
    implementation "com.kuriosityrobotics.shuttle:shuttle-hardware:1.0"
}
>>>>>>> 6ac96b2 (shuttle implemented)
